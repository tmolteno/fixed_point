#ifndef __quaternion__
#define __quaternion__

/*
Copyright (C) 2006  Tim Molteno tim@molteno.net

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/


#include "Fixed.h"
#include "FixedVector.h"


/*!\brief A Class for handling Hamilton's quaternions composed of Fixed16 objects. These are useful for representing rotations.
\code
	Quaternion q(w,x,y,z); // make the quaternion q from four fixed16's
	q.get_euler();

	Quaternion q(1,2,3,4);
	Quaternion r(0,2,3,4);
	Quaternion m = r*q; // multiply the quaternions
\endcode
*/
class Quaternion
{
public:
	Fixed16 q0;	//!< w component of the Quaternion
	Fixed16 q1;	//!< x component of the Quaternion
	Fixed16 q2;	//!< y component of the Quaternion
	Fixed16 q3;	//!< z component of the Quaternion

	Quaternion(const Fixed16& in_q0, const Fixed16& in_q1, const Fixed16& in_q2, const Fixed16& in_q3)
		: q0(in_q0), q1(in_q1), q2(in_q2), q3(in_q3)
	{ }

	Quaternion(const Quaternion& qin)
		: q0(qin.q0), q1(qin.q1), q2(qin.q2), q3(qin.q3)
	{ }

	Quaternion(const int& in_q0, const int& in_q1, const int& in_q2, const int& in_q3)
		: q0(Fixed16(in_q0)), q1(Fixed16(in_q1)), q2(Fixed16(in_q2)), q3(Fixed16(in_q3))
	{ }

	Quaternion& operator=(const Quaternion& qin)
	{
		q0 = qin.q0;
		q1 = qin.q1;
		q2 = qin.q2;
		q3 = qin.q3;
		return *this;
	}


	/*!\brief Return the norm squared of this quaternion
	*/
	Fixed16 norm2() const
	{
		return Fixed16(q0*q0 + q1*q1 + q2*q2 + q3*q3);
	}

	/*!\brief Return the norm of this quaternion
	*/
	Fixed16 norm() const
	{
		return sqrt(norm2());
	}

	static Quaternion normalize(const Quaternion& qin)
	{
		Fixed16 n = invsqrt(qin.norm2());
		Quaternion ret = qin;
		ret.q0 = qin.q0 * n;
		ret.q1 = qin.q1 * n;
		ret.q2 = qin.q2 * n;
		ret.q3 = qin.q3 * n;
		return ret;
	}

	static bool test_inRange(Fixed16 a, Fixed16 b, Fixed16 error);

	static Quaternion conjugate(const Quaternion& q);

	// return the Euler angles in radians
	void get_euler(Fixed16& theta, Fixed16&phi, Fixed16& psi) const;

	static Quaternion from_euler(Fixed16& theta, Fixed16& phi, Fixed16& psi);



#ifdef IOSTREAMS
	friend std::ostream& operator<<(std::ostream& os, const Quaternion&);
	
	static bool testharness();
#endif
};

bool operator!=(const Quaternion& a, const Quaternion& b);

Quaternion operator*(const Quaternion& a, const Quaternion& b);
Quaternion operator+(const Quaternion& a, const Quaternion& b);


#endif /* __quaternion__ */
