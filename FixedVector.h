#ifndef __FixedVector__
#define __FixedVector__
/*
FixedVector.h. Fixed point vector class for microcontrollers.

Copyright (C) 2005-2006  Tim Molteno tim@molteno.net

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include "Fixed.h"
class Quaternion;


/*!\brief A three dimensional vector of Fixed16 objects.
*/
class FixedVector
{
public:
	FixedVector()
		: x(0), y(0), z(0)
	{
	}

	FixedVector(const FixedVector& v)
		: x(v.x), y(v.y), z(v.z)
	{
	}

	FixedVector(const Fixed16& in_x, const Fixed16& in_y, const Fixed16& in_z)
		: x(in_x), y(in_y), z(in_z)
	{
	}

	FixedVector(const Fixed32& in_x, const Fixed32& in_y, const Fixed32& in_z)
		: x(in_x), y(in_y), z(in_z)
	{
	}

	FixedVector(const f_int32& in_x, const f_int32& in_y, const f_int32& in_z)
		: x(in_x), y(in_y), z(in_z)
	{
	}
	
	/*!\brief Rotate the current vector using the Quaternion q
	*/
	FixedVector Rotate3D(const Quaternion& q) const;

#ifdef IOSTREAMS
	friend std::ostream& operator<<(std::ostream& os, const FixedVector&);
	
	static bool testharness();
#endif
	
	Fixed16 x,y,z;
};

FixedVector operator+(const FixedVector& a, const FixedVector& b);
FixedVector operator-(const FixedVector& a, const FixedVector& b);
FixedVector operator*(const FixedVector& a, const Fixed16& b);
FixedVector operator/(const FixedVector& a, const Fixed16& b);

/*!\brief Inner (dot) product.
*/
Fixed16 dot(const FixedVector& a, const FixedVector& b);

/*!\brief Vector cross product (a x b).
*/
FixedVector cross(const FixedVector& a, const FixedVector& b);

/*!\brief Euclidean norm (length) of a vector
*/
Fixed16 norm(const FixedVector& a);

/*!\brief Euclidean norm (length) of a vector squared
*/
Fixed16 norm2(const FixedVector& a);

/*!\brief Return the max element of a vector
	can use as a scaling factor prior to normalising
*/
Fixed16 maxElement(const FixedVector& v);

/*!\brief Return a unit vector in the direction of v
    Scales vector by max element prior to normalisation
*/
FixedVector normalise(const FixedVector& v);

/*!\brief A UnitVector utility subclass of FixedVector.
This class is used to automatically normalize vectors, for example
when using the angle() function we can pass it some fixed vectors
and they will automatically be normalized.
*/
class UnitVector : public FixedVector
{
public:
	UnitVector(const FixedVector& v)
		: FixedVector(v * invsqrt(norm2(v)))
	{
	}
};

/*!\brief Find the angle between two vectors.
\param a The first UnitVector
\param b The second UnitVector
\return angle in radians between a and b.
*/
Fixed16 angle(const UnitVector& a, const UnitVector& b);

#endif /* __FixedVector__ */
