/*
FixedMatrix.cpp Fixed point Matrix class for microcontrollers.

Copyright (C) 2005-2006  Matthew Chave mattchave@hotmail.com

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

//#include "FixedVector.h"
#include "FixedMatrix.h"
//#include "Quaternion.h"

#ifdef IOSTREAMS

bool FixedMatrix::testharness()
{
	FixedMatrix a(1,2,3, 0,4,5, 1,4,6);
	FixedMatrix b(10,2,6, 1,2,2, 9,3,14);
	FixedVector c(7, 3, -5);
	Fixed16 f(1);
	
	FixedMatrix g (c, c, c);
	
	cout << endl << "FixedMatrix TestHarness" << endl << endl;
	cout << "a " << a << endl;
	cout << "b " << b << endl;
	cout << "c " << c << endl;
	cout << "f " << f << endl;
	cout << "g (c,c,c) " << g << endl;
		
	cout << "a-b " << (a - b) << endl;	
	cout << "a+b " << (a + b) << endl;
	cout << "a*b " << (a * b) << endl;		
	cout << "dot(a,b) " << dot(a,b) << endl;
	cout << "det(a) " << det(a) << endl;
	cout << "inv(a) " << inv(a) << endl;
	cout << "trans(a) " << trans(a) << endl;
	cout << "cofact(a) " << cofact(a) << endl;
	
	FixedMatrix d = a*b;
	cout << "FixedMatrix d = a*b; " << d << endl;		
	
	cout << "c*a " << (c * a) << endl;		
	cout << "a*c " << (a * c) << endl;		
		
	cout << "a*f " << a*f << endl;	
	cout << "a/f " << a/f << endl;	
	
	Fixed16 yaw = Fixed16(0), pitch = Fixed16(0), roll = Fixed16(0);
	cout << "getrotmat(0, 0, 0) " << getrotmat(yaw, pitch, roll) << endl;	
	

	
	//for (int i=0;i<1000;i++)
	{
		FixedMatrix m(3,4,5, 3,4,5, 3,4,5);
		cout << "m " << m << endl;

		m = m / Fixed16(10);

	}
	cout << endl << "FixedMatrix TestHarness Complete" << endl << endl;
	return true;
}
#endif

#ifdef IOSTREAMS
std::ostream& operator<<(std::ostream& os, const FixedMatrix& m)
{
	os << "[" 
	<< "("<< m.m11 << "," << m.m12 << "," << m.m13 << "), "
	<< "("<< m.m21 << "," << m.m22 << "," << m.m23 << "), "
	<< "("<< m.m31 << "," << m.m32 << "," << m.m33 << ")" 
	<< "]";
	return os;
}
#endif

FixedMatrix operator+(const FixedMatrix& a, const FixedMatrix& b)
{
	return FixedMatrix(	a.m11 + b.m11, a.m12 + b.m12, a.m13 + b.m13, 
				a.m21 + b.m21, a.m22 + b.m22, a.m23 + b.m23, 
				a.m31 + b.m31, a.m32 + b.m32, a.m33 + b.m33);
}

FixedMatrix operator/(const FixedMatrix& a, const Fixed16& b)
{
	return FixedMatrix(a.m11 /b, a.m12 /b , a.m13 /b , a.m21 /b , a.m22 /b , a.m23 /b , a.m31 /b , a.m32 /b , a.m33 /b);
}

FixedMatrix operator*(const FixedMatrix& a, const Fixed16& b)
{
	return FixedMatrix(a.m11 *b, a.m12 *b , a.m13 *b , a.m21 *b , a.m22 *b , a.m23 *b , a.m31 *b , a.m32 *b , a.m33 *b);
}
FixedMatrix operator*(const Fixed16& b, const FixedMatrix& a)
{
	return FixedMatrix(a.m11 *b, a.m12 *b , a.m13 *b , a.m21 *b , a.m22 *b , a.m23 *b , a.m31 *b , a.m32 *b , a.m33 *b);
}

FixedMatrix operator*(const FixedMatrix& a, const FixedMatrix& b)
{
	FixedVector a1(a.m11, a.m12, a.m13);
	FixedVector a2(a.m21, a.m22, a.m23);
	FixedVector a3(a.m31, a.m32, a.m33);
	
	FixedVector b1(b.m11, b.m21, b.m31);
	FixedVector b2(b.m12, b.m22, b.m32);
	FixedVector b3(b.m13, b.m23, b.m33);
	
	return FixedMatrix(	dot(a1, b1), dot(a1, b2), dot(a1, b3), 
				dot(a2, b1), dot(a2, b2), dot(a2, b3), 
				dot(a3, b1), dot(a3, b2), dot(a3, b3));
}

/*!\brief multiply a vector by a matrix returning a vector
	where the vector is a row vector i.e(1x3) 1x3*3x3 = 1x3	
*/
FixedVector operator*(const FixedVector& a, const FixedMatrix& b)
{
	FixedVector b1(b.m11, b.m21, b.m31);
	FixedVector b2(b.m12, b.m22, b.m32);
	FixedVector b3(b.m13, b.m23, b.m33);
	
	return FixedVector(dot(a, b1), dot(a, b2), dot(a, b3));
}

/*!\brief multiply a matrix by a vector returning a vector
	where the vector is a colum vector i.e(3x1) 3x3*3x1 = 3x1	
*/
FixedVector operator*(const FixedMatrix& b, const FixedVector& a)
{
	FixedVector b1(b.m11, b.m12, b.m13);
	FixedVector b2(b.m21, b.m22, b.m23);
	FixedVector b3(b.m31, b.m32, b.m33);
	
	return FixedVector(dot(a, b1), dot(a, b2), dot(a, b3));
}

FixedMatrix operator-(const FixedMatrix& a, const FixedMatrix& b)
{
	return FixedMatrix(	a.m11 - b.m11, a.m12 - b.m12, a.m13 - b.m13, 
				a.m21 - b.m21, a.m22 - b.m22, a.m23 - b.m23, 
				a.m31 - b.m31, a.m32 - b.m32, a.m33 - b.m33);
}

FixedVector dot(const FixedMatrix& a, const FixedMatrix& b)
{
	FixedVector a1(a.m11, a.m12, a.m13);
	FixedVector a2(a.m21, a.m22, a.m23);
	FixedVector a3(a.m31, a.m32, a.m33);
	
	FixedVector b1(b.m11, b.m12, b.m13);
	FixedVector b2(b.m21, b.m22, b.m23);
	FixedVector b3(b.m31, b.m32, b.m33);
	
	return FixedVector(dot(a1, b1), dot(a2, b2), dot(a3, b3));
}

Fixed16 det(const FixedMatrix& a)
{
	return Fixed16 (a.m11*a.m22*a.m33 - a.m13*a.m22*a.m31 + 
			a.m12*a.m23*a.m31 - a.m12*a.m21*a.m33 + 
			a.m13*a.m21*a.m32 - a.m11*a.m23*a.m32);
}

Fixed16 det2by2(const Fixed16& a, const Fixed16& b, const Fixed16& c, const Fixed16& d)
{
	return Fixed16 (a*d - c*b);
}

FixedMatrix cofact(const FixedMatrix& a)
{
    return FixedMatrix(	det2by2(a.m22,a.m23,a.m32,a.m33), -det2by2(a.m21,a.m23,a.m31,a.m33), det2by2(a.m21,a.m22,a.m31,a.m32),
			-det2by2(a.m12,a.m13,a.m32,a.m33), det2by2(a.m11,a.m13,a.m31,a.m33), -det2by2(a.m11,a.m12,a.m31,a.m32),
			det2by2(a.m12,a.m13,a.m22,a.m23), -det2by2(a.m11,a.m13,a.m21,a.m23), det2by2(a.m11,a.m12,a.m21,a.m22));
}

FixedMatrix inv(const FixedMatrix& a)
{
	Fixed16 determ = det(a);
	if (determ != Fixed16(0)) //TODO it might not actually return zero due to rounding but be close to zero need to check
	{
		return (trans(cofact(a))/determ);	
	}
	else
		return FixedMatrix(0,0,0, 0,0,0, 0,0,0); //TODO this could be better, due to non-invertable matrix
	
}

FixedMatrix trans(const FixedMatrix& a)
{
	return FixedMatrix(	a.m11,a.m21,a.m31, 
				a.m12,a.m22,a.m32,
				a.m13,a.m23,a.m33);
}

#define one_f16 Fixed16::one()
#define zero_f16 Fixed16::zero()

FixedMatrix getrotmat(Fixed16& theta, Fixed16& phi, Fixed16& psi)
{
	FixedMatrix Rr (one_f16,zero_f16,zero_f16, zero_f16,cos(theta),-sin(theta), zero_f16,sin(theta),cos(theta));
	
	FixedMatrix Rp (cos(phi),zero_f16,sin(phi), zero_f16,one_f16,zero_f16, -sin(phi),zero_f16,cos(phi));
	
	FixedMatrix Ry (cos(psi),-sin(psi),zero_f16, sin(psi),cos(psi),zero_f16, zero_f16,zero_f16,one_f16);
	
	return ( Ry*Rp*Rr );
}

FixedVector get_eulers(FixedMatrix& R)
{	
	Fixed16 NED_heading =  arctan2(R.m21, R.m11);

	Fixed16 NED_pitch = arcsin(R.m31/ sqrt(R.m31*R.m31 + R.m21*R.m21 + R.m11*R.m11));
	
	Fixed16 NED_roll(0); //TODO need to add
	
	return FixedVector(NED_roll, NED_pitch, NED_heading);
	
}

// FixedVector cross(const FixedVector& u, const FixedVector& v)
// {
// 	return FixedVector(u.y*v.z - u.z*v.y, u.z*v.x - u.x*v.z, u.x*v.y - u.y*v.x);
// }



// FixedVector FixedVector::Rotate3D(const FixedMatrix& M) const
// {
// 	return dot31(M, this);
// }
